# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Check dependency versions
      run: |
          # List the dependencies you want to check here
          DEPENDENCIES=$(mvn versions:display-property-updates versions:display-parent-updates -DgenerateBackupPoms=false \
          | awk -F ' ' '{if ($2 != $4) print $0}')
          # Loop through the dependencies and check their versions
          for dependency in "${DEPENDENCIES[@]}"; do
            echo "Checking ${dependency} version..."
            CURRENT_VERSION=$(mvn dependency:resolve | grep ${dependency} | awk -F: '{print $4}')
            EXPECTED_VERSION=$(mvn help:evaluate -Dexpression=${dependency} -q -DforceStdout)
            
            if [[ "${CURRENT_VERSION}" != "${EXPECTED_VERSION}" ]]; then
              echo "❌ ${dependency} version mismatch. Expected ${EXPECTED_VERSION}, found ${CURRENT_VERSION}"
              exit 1
            else
              echo "✅ ${dependency} version is correct"
            fi
          done
        
